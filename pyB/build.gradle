buildscript {
 repositories {
    mavenRepo name: 'cobra_ext', urls: "http://cobra.cs.uni-duesseldorf.de:8081/artifactory/ext-release-local"
 }

 dependencies {
    classpath(group: 'de.stups', name: 'sablecc', version: '[3.2.1.1,3.2.2.0[')
 }
}


def config;
try { 
 config  = new ConfigSlurper().parse(new File('config.groovy').toURL())
} catch (Exception e) {
 config = new ConfigSlurper().parse("""vseparator="."
bseparator=""
major=2
minor=0
current.service=0
""") 
}

bump(config) { config.current.service += 1 }
project.version = version(config)
project.group = 'de.prob'


// Bump Build number
def version(config) {
    return config.major+config.vseparator+config.minor+config.vseparator+config.current.service
}

def bump(config,clos) {
    def before = version(config)
    clos(config)
    def after = version(config)
    file('config.groovy').withWriter {
                                     writer -> config.writeTo(writer)
                                     }
                                     println "Version changed: "+before+" -> "+after
}

// The real configuration

allprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  sourceCompatibility = 1.5
 
  clean {
	doLast {
      def delClos
      delClos = { 
        it.eachDir( delClos );
        it.eachFile { it.delete() }
	    it.delete()
      }
	  def build_dir = file("build")
      if (build_dir.exists()) delClos(build_dir)
      def gradle_cache = file(".gradle")
      if (gradle_cache.exists()) delClos(gradle_cache)
      def bin_dir = file("bin")
      if (bin_dir.exists()) delClos(bin_dir)
    }
  }
}

subprojects {
 apply plugin: 'eclipse'
 apply from: rootDir.getAbsolutePath()+'/scripts/emma.gradle'
 apply from: rootDir.getAbsolutePath()+'/scripts/findbugs.gradle'
 group = 'de.prob'
 version = version(config)
 repositories {
    mavenRepo name: 'cobra_ext', urls: "http://cobra.cs.uni-duesseldorf.de:8081/artifactory/ext-release-local"
    mavenCentral()
 }

configurations {
	sablecc
}


dependencies {
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    testCompile 'junit:junit:4.8.2'
    sablecc(group: 'de.stups', name: 'sablecc', version: '[3.2.1.1,3.2.2.0[')
}

 task deploy(dependsOn: [build])

 eclipseProject {
	natures 'edu.umd.cs.findbugs.plugin.eclipse.findbugsNature'
	buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
 }

 cleanEclipseJdt << {
	file(".settings/org.eclipse.jdt.ui.prefs").delete()
 }

 eclipseJdt {
	inputFile = file("scripts/org.eclipse.jdt.core.prefs")
 }

 eclipseJdt << {
	copy {  from 'scripts'
		into '.settings'
		include 'org.eclipse.jdt.ui.prefs'
    }
 }

}

task globaljavadoc(type: Javadoc, dependsOn: subprojects.assemble) {
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    destinationDir = new File(buildDir, 'javadoc')
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
}


task uberjar(type: Jar, dependsOn: subprojects.deploy) { 
    baseName = 'probcliparser' 
    subprojects.each { subproject -> 
        from subproject.configurations.archives.allArtifactFiles.collect { zipTree(it) } 
    } 
    manifest { attributes 'Main-Class': 'de.prob.cliparser.CliBParser' }
}

task deploy(dependsOn: [subprojects.deploy,globaljavadoc]) 
