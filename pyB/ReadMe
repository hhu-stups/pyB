31.08.2011 - 07.10.2011
by John Witulski 

Config:
    copy ASTPython.java to .../bparser/src/main/java/de/be4/classicalb/core/parser/analysis/python
    overwrite BParser.java  CliBParser.java  ConsoleOptions.java  ParsingBehaviour.java inside the correct src folder
    generate the jar by typing "./gradlew jar" in the project-root-dir
    the jar files must be in the correct dir. see pyB.py Line 7-13
    This hard-codes path must be set manually at the moment


Run pyB:
    python pyB.py <FileName>
    e.g Filename or input.txt with the content like: "#PREDICATE 4-3=1" 

Run Tests:
    py.test
    the /tests are in the tests folder

Features:
    Evals arith. Preds like:   1+1=2
    Evals set Preds like:   x:ID 
    Evals set extentions like:  {a,b,c}
    Evals quantified preds like: #(z).(z<4 & z>0) (only integer!)
    Evals Set Comprehensions like:  (1,2):{(x,y) | x>0 & x <4 & x/=0 or y/=x} (only integer!)
    Evals realtions, functions and sequences


How it works:
    A AST visitor "ASTPython.java" gens a String with pythoncode.
    This string is executed with "exec" in "pyB.py".
    The string is mapped to the ASTNodes in "ast_nodes.py"
    This AST is eval. via "interp.py"
    A map Varname-> Type is created via the typeit method.
    It uses a unify method to handel unknown types like S=V\/T T:POW(X)
    The typing is necessery to eval. quantified preds
    assumes that both sides of ops like (\/ or /=) have the same type.
    typechecking is done - on the fly

DONE:
    - replace depricated set module
    - implement AST Gen for Node with more than two children
        e.g. ASetExtensionExpression
    - move tests in seperated files
    - use new env interface inside tests
    - !, # set-comp and pi dont use correct enum
    - rename quantified variables in helper-funcs -solved by scoping


TODO:
    - Typing maybe fails if vars have the same name (unify)
    - remove fix value/type from tests if possible
    - write more scoping tests
    - Tests ignore Frames and Scopes. Fix that
    - assumes that all functions are 2-tuple: otherwise crash
    - write more AST-Gen tests
    - wirte a build-script
    - sets and frozensets are mixed (e.g in POW)..fix that
    - Maybe the implemenation has to be fixed if infinite sets are introduced
    - enable function applications (4.1.9) with many args
    - not tested: sequences of sequences
    - not tested: append/preprend more than one element
    - Maybe a BUG: there are no local vars. all vars are global
    - BUG: a. typechecking the settype contains data, this data is not valid e.g. after set union, inters. diff.


MISSING FEATURES:
    - infinite sets/sequences/relations
    - substitutions
    - singleton sets
    - sp. union/inter buildins
    - min/max an the natural numbers - not ProB
    - interval sum and pi
    - itrations and closure
    - lambda abstractions
    - generalized cinc and strings
    - NAT and NAT1 is not infinite!
    - and maybe more...;-)
