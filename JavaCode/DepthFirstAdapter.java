/* This file was generated by SableCC (http://www.sablecc.org/). */

package de.be4.classicalb.core.parser.analysis;

import java.util.*;
import de.be4.classicalb.core.parser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPParseUnit().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAAbstractMachineParseUnit(AAbstractMachineParseUnit node)
    {
        defaultIn(node);
    }

    public void outAAbstractMachineParseUnit(AAbstractMachineParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractMachineParseUnit(AAbstractMachineParseUnit node)
    {
        inAAbstractMachineParseUnit(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PMachineClause> copy = new ArrayList<PMachineClause>(node.getMachineClauses());
            for(PMachineClause e : copy)
            {
                e.apply(this);
            }
        }
        outAAbstractMachineParseUnit(node);
    }

    public void inARefinementMachineParseUnit(ARefinementMachineParseUnit node)
    {
        defaultIn(node);
    }

    public void outARefinementMachineParseUnit(ARefinementMachineParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARefinementMachineParseUnit(ARefinementMachineParseUnit node)
    {
        inARefinementMachineParseUnit(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getRefMachine() != null)
        {
            node.getRefMachine().apply(this);
        }
        {
            List<PMachineClause> copy = new ArrayList<PMachineClause>(node.getMachineClauses());
            for(PMachineClause e : copy)
            {
                e.apply(this);
            }
        }
        outARefinementMachineParseUnit(node);
    }

    public void inAImplementationMachineParseUnit(AImplementationMachineParseUnit node)
    {
        defaultIn(node);
    }

    public void outAImplementationMachineParseUnit(AImplementationMachineParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImplementationMachineParseUnit(AImplementationMachineParseUnit node)
    {
        inAImplementationMachineParseUnit(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getRefMachine() != null)
        {
            node.getRefMachine().apply(this);
        }
        {
            List<PMachineClause> copy = new ArrayList<PMachineClause>(node.getMachineClauses());
            for(PMachineClause e : copy)
            {
                e.apply(this);
            }
        }
        outAImplementationMachineParseUnit(node);
    }

    public void inADefinitionFileParseUnit(ADefinitionFileParseUnit node)
    {
        defaultIn(node);
    }

    public void outADefinitionFileParseUnit(ADefinitionFileParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionFileParseUnit(ADefinitionFileParseUnit node)
    {
        inADefinitionFileParseUnit(node);
        if(node.getDefinitionsClauses() != null)
        {
            node.getDefinitionsClauses().apply(this);
        }
        outADefinitionFileParseUnit(node);
    }

    public void inAPredicateParseUnit(APredicateParseUnit node)
    {
        defaultIn(node);
    }

    public void outAPredicateParseUnit(APredicateParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPredicateParseUnit(APredicateParseUnit node)
    {
        inAPredicateParseUnit(node);
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outAPredicateParseUnit(node);
    }

    public void inAExpressionParseUnit(AExpressionParseUnit node)
    {
        defaultIn(node);
    }

    public void outAExpressionParseUnit(AExpressionParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionParseUnit(AExpressionParseUnit node)
    {
        inAExpressionParseUnit(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionParseUnit(node);
    }

    public void inASubstitutionParseUnit(ASubstitutionParseUnit node)
    {
        defaultIn(node);
    }

    public void outASubstitutionParseUnit(ASubstitutionParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubstitutionParseUnit(ASubstitutionParseUnit node)
    {
        inASubstitutionParseUnit(node);
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outASubstitutionParseUnit(node);
    }

    public void inAMachineClauseParseUnit(AMachineClauseParseUnit node)
    {
        defaultIn(node);
    }

    public void outAMachineClauseParseUnit(AMachineClauseParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMachineClauseParseUnit(AMachineClauseParseUnit node)
    {
        inAMachineClauseParseUnit(node);
        if(node.getMachineClause() != null)
        {
            node.getMachineClause().apply(this);
        }
        outAMachineClauseParseUnit(node);
    }

    public void inAEventBContextParseUnit(AEventBContextParseUnit node)
    {
        defaultIn(node);
    }

    public void outAEventBContextParseUnit(AEventBContextParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventBContextParseUnit(AEventBContextParseUnit node)
    {
        inAEventBContextParseUnit(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PContextClause> copy = new ArrayList<PContextClause>(node.getContextClauses());
            for(PContextClause e : copy)
            {
                e.apply(this);
            }
        }
        outAEventBContextParseUnit(node);
    }

    public void inAEventBModelParseUnit(AEventBModelParseUnit node)
    {
        defaultIn(node);
    }

    public void outAEventBModelParseUnit(AEventBModelParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventBModelParseUnit(AEventBModelParseUnit node)
    {
        inAEventBModelParseUnit(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PModelClause> copy = new ArrayList<PModelClause>(node.getModelClauses());
            for(PModelClause e : copy)
            {
                e.apply(this);
            }
        }
        outAEventBModelParseUnit(node);
    }

    public void inAOppatternParseUnit(AOppatternParseUnit node)
    {
        defaultIn(node);
    }

    public void outAOppatternParseUnit(AOppatternParseUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOppatternParseUnit(AOppatternParseUnit node)
    {
        inAOppatternParseUnit(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getName());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PArgpattern> copy = new ArrayList<PArgpattern>(node.getParameters());
            for(PArgpattern e : copy)
            {
                e.apply(this);
            }
        }
        outAOppatternParseUnit(node);
    }

    public void inAUndefArgpattern(AUndefArgpattern node)
    {
        defaultIn(node);
    }

    public void outAUndefArgpattern(AUndefArgpattern node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUndefArgpattern(AUndefArgpattern node)
    {
        inAUndefArgpattern(node);
        outAUndefArgpattern(node);
    }

    public void inADefArgpattern(ADefArgpattern node)
    {
        defaultIn(node);
    }

    public void outADefArgpattern(ADefArgpattern node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefArgpattern(ADefArgpattern node)
    {
        inADefArgpattern(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outADefArgpattern(node);
    }

    public void inACsppattern(ACsppattern node)
    {
        defaultIn(node);
    }

    public void outACsppattern(ACsppattern node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACsppattern(ACsppattern node)
    {
        inACsppattern(node);
        if(node.getArgtype() != null)
        {
            node.getArgtype().apply(this);
        }
        if(node.getArgpattern() != null)
        {
            node.getArgpattern().apply(this);
        }
        outACsppattern(node);
    }

    public void inAJoinArgtype(AJoinArgtype node)
    {
        defaultIn(node);
    }

    public void outAJoinArgtype(AJoinArgtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAJoinArgtype(AJoinArgtype node)
    {
        inAJoinArgtype(node);
        outAJoinArgtype(node);
    }

    public void inAInArgtype(AInArgtype node)
    {
        defaultIn(node);
    }

    public void outAInArgtype(AInArgtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInArgtype(AInArgtype node)
    {
        inAInArgtype(node);
        outAInArgtype(node);
    }

    public void inAOutArgtype(AOutArgtype node)
    {
        defaultIn(node);
    }

    public void outAOutArgtype(AOutArgtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOutArgtype(AOutArgtype node)
    {
        inAOutArgtype(node);
        outAOutArgtype(node);
    }

    public void inAMachineHeader(AMachineHeader node)
    {
        defaultIn(node);
    }

    public void outAMachineHeader(AMachineHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMachineHeader(AMachineHeader node)
    {
        inAMachineHeader(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getName());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAMachineHeader(node);
    }

    public void inAExtendsContextClause(AExtendsContextClause node)
    {
        defaultIn(node);
    }

    public void outAExtendsContextClause(AExtendsContextClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsContextClause(AExtendsContextClause node)
    {
        inAExtendsContextClause(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getExtends());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        outAExtendsContextClause(node);
    }

    public void inASetsContextClause(ASetsContextClause node)
    {
        defaultIn(node);
    }

    public void outASetsContextClause(ASetsContextClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetsContextClause(ASetsContextClause node)
    {
        inASetsContextClause(node);
        {
            List<PSet> copy = new ArrayList<PSet>(node.getSet());
            for(PSet e : copy)
            {
                e.apply(this);
            }
        }
        outASetsContextClause(node);
    }

    public void inAConstantsContextClause(AConstantsContextClause node)
    {
        defaultIn(node);
    }

    public void outAConstantsContextClause(AConstantsContextClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantsContextClause(AConstantsContextClause node)
    {
        inAConstantsContextClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAConstantsContextClause(node);
    }

    public void inAAxiomsContextClause(AAxiomsContextClause node)
    {
        defaultIn(node);
    }

    public void outAAxiomsContextClause(AAxiomsContextClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAxiomsContextClause(AAxiomsContextClause node)
    {
        inAAxiomsContextClause(node);
        {
            List<PPredicate> copy = new ArrayList<PPredicate>(node.getPredicates());
            for(PPredicate e : copy)
            {
                e.apply(this);
            }
        }
        outAAxiomsContextClause(node);
    }

    public void inATheoremsContextClause(ATheoremsContextClause node)
    {
        defaultIn(node);
    }

    public void outATheoremsContextClause(ATheoremsContextClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATheoremsContextClause(ATheoremsContextClause node)
    {
        inATheoremsContextClause(node);
        {
            List<PPredicate> copy = new ArrayList<PPredicate>(node.getPredicates());
            for(PPredicate e : copy)
            {
                e.apply(this);
            }
        }
        outATheoremsContextClause(node);
    }

    public void inARefinesModelClause(ARefinesModelClause node)
    {
        defaultIn(node);
    }

    public void outARefinesModelClause(ARefinesModelClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARefinesModelClause(ARefinesModelClause node)
    {
        inARefinesModelClause(node);
        if(node.getRefines() != null)
        {
            node.getRefines().apply(this);
        }
        outARefinesModelClause(node);
    }

    public void inASeesModelClause(ASeesModelClause node)
    {
        defaultIn(node);
    }

    public void outASeesModelClause(ASeesModelClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeesModelClause(ASeesModelClause node)
    {
        inASeesModelClause(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getSees());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        outASeesModelClause(node);
    }

    public void inAVariablesModelClause(AVariablesModelClause node)
    {
        defaultIn(node);
    }

    public void outAVariablesModelClause(AVariablesModelClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariablesModelClause(AVariablesModelClause node)
    {
        inAVariablesModelClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAVariablesModelClause(node);
    }

    public void inAInvariantModelClause(AInvariantModelClause node)
    {
        defaultIn(node);
    }

    public void outAInvariantModelClause(AInvariantModelClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInvariantModelClause(AInvariantModelClause node)
    {
        inAInvariantModelClause(node);
        {
            List<PPredicate> copy = new ArrayList<PPredicate>(node.getPredicates());
            for(PPredicate e : copy)
            {
                e.apply(this);
            }
        }
        outAInvariantModelClause(node);
    }

    public void inATheoremsModelClause(ATheoremsModelClause node)
    {
        defaultIn(node);
    }

    public void outATheoremsModelClause(ATheoremsModelClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATheoremsModelClause(ATheoremsModelClause node)
    {
        inATheoremsModelClause(node);
        {
            List<PPredicate> copy = new ArrayList<PPredicate>(node.getPredicates());
            for(PPredicate e : copy)
            {
                e.apply(this);
            }
        }
        outATheoremsModelClause(node);
    }

    public void inAVariantModelClause(AVariantModelClause node)
    {
        defaultIn(node);
    }

    public void outAVariantModelClause(AVariantModelClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariantModelClause(AVariantModelClause node)
    {
        inAVariantModelClause(node);
        if(node.getVariant() != null)
        {
            node.getVariant().apply(this);
        }
        outAVariantModelClause(node);
    }

    public void inAEventsModelClause(AEventsModelClause node)
    {
        defaultIn(node);
    }

    public void outAEventsModelClause(AEventsModelClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventsModelClause(AEventsModelClause node)
    {
        inAEventsModelClause(node);
        {
            List<PEvent> copy = new ArrayList<PEvent>(node.getEvent());
            for(PEvent e : copy)
            {
                e.apply(this);
            }
        }
        outAEventsModelClause(node);
    }

    public void inADefinitionsMachineClause(ADefinitionsMachineClause node)
    {
        defaultIn(node);
    }

    public void outADefinitionsMachineClause(ADefinitionsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionsMachineClause(ADefinitionsMachineClause node)
    {
        inADefinitionsMachineClause(node);
        {
            List<PDefinition> copy = new ArrayList<PDefinition>(node.getDefinitions());
            for(PDefinition e : copy)
            {
                e.apply(this);
            }
        }
        outADefinitionsMachineClause(node);
    }

    public void inASeesMachineClause(ASeesMachineClause node)
    {
        defaultIn(node);
    }

    public void outASeesMachineClause(ASeesMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeesMachineClause(ASeesMachineClause node)
    {
        inASeesMachineClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getMachineNames());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outASeesMachineClause(node);
    }

    public void inAPromotesMachineClause(APromotesMachineClause node)
    {
        defaultIn(node);
    }

    public void outAPromotesMachineClause(APromotesMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPromotesMachineClause(APromotesMachineClause node)
    {
        inAPromotesMachineClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getMachineNames());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAPromotesMachineClause(node);
    }

    public void inAUsesMachineClause(AUsesMachineClause node)
    {
        defaultIn(node);
    }

    public void outAUsesMachineClause(AUsesMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUsesMachineClause(AUsesMachineClause node)
    {
        inAUsesMachineClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getMachineNames());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAUsesMachineClause(node);
    }

    public void inAIncludesMachineClause(AIncludesMachineClause node)
    {
        defaultIn(node);
    }

    public void outAIncludesMachineClause(AIncludesMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludesMachineClause(AIncludesMachineClause node)
    {
        inAIncludesMachineClause(node);
        {
            List<PMachineReference> copy = new ArrayList<PMachineReference>(node.getMachineReferences());
            for(PMachineReference e : copy)
            {
                e.apply(this);
            }
        }
        outAIncludesMachineClause(node);
    }

    public void inAExtendsMachineClause(AExtendsMachineClause node)
    {
        defaultIn(node);
    }

    public void outAExtendsMachineClause(AExtendsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsMachineClause(AExtendsMachineClause node)
    {
        inAExtendsMachineClause(node);
        {
            List<PMachineReference> copy = new ArrayList<PMachineReference>(node.getMachineReferences());
            for(PMachineReference e : copy)
            {
                e.apply(this);
            }
        }
        outAExtendsMachineClause(node);
    }

    public void inAImportsMachineClause(AImportsMachineClause node)
    {
        defaultIn(node);
    }

    public void outAImportsMachineClause(AImportsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportsMachineClause(AImportsMachineClause node)
    {
        inAImportsMachineClause(node);
        {
            List<PMachineReference> copy = new ArrayList<PMachineReference>(node.getMachineReferences());
            for(PMachineReference e : copy)
            {
                e.apply(this);
            }
        }
        outAImportsMachineClause(node);
    }

    public void inASetsMachineClause(ASetsMachineClause node)
    {
        defaultIn(node);
    }

    public void outASetsMachineClause(ASetsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetsMachineClause(ASetsMachineClause node)
    {
        inASetsMachineClause(node);
        {
            List<PSet> copy = new ArrayList<PSet>(node.getSetDefinitions());
            for(PSet e : copy)
            {
                e.apply(this);
            }
        }
        outASetsMachineClause(node);
    }

    public void inAVariablesMachineClause(AVariablesMachineClause node)
    {
        defaultIn(node);
    }

    public void outAVariablesMachineClause(AVariablesMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariablesMachineClause(AVariablesMachineClause node)
    {
        inAVariablesMachineClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAVariablesMachineClause(node);
    }

    public void inAConcreteVariablesMachineClause(AConcreteVariablesMachineClause node)
    {
        defaultIn(node);
    }

    public void outAConcreteVariablesMachineClause(AConcreteVariablesMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcreteVariablesMachineClause(AConcreteVariablesMachineClause node)
    {
        inAConcreteVariablesMachineClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAConcreteVariablesMachineClause(node);
    }

    public void inAAbstractConstantsMachineClause(AAbstractConstantsMachineClause node)
    {
        defaultIn(node);
    }

    public void outAAbstractConstantsMachineClause(AAbstractConstantsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAbstractConstantsMachineClause(AAbstractConstantsMachineClause node)
    {
        inAAbstractConstantsMachineClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAAbstractConstantsMachineClause(node);
    }

    public void inAConstantsMachineClause(AConstantsMachineClause node)
    {
        defaultIn(node);
    }

    public void outAConstantsMachineClause(AConstantsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantsMachineClause(AConstantsMachineClause node)
    {
        inAConstantsMachineClause(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAConstantsMachineClause(node);
    }

    public void inAPropertiesMachineClause(APropertiesMachineClause node)
    {
        defaultIn(node);
    }

    public void outAPropertiesMachineClause(APropertiesMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPropertiesMachineClause(APropertiesMachineClause node)
    {
        inAPropertiesMachineClause(node);
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        outAPropertiesMachineClause(node);
    }

    public void inAConstraintsMachineClause(AConstraintsMachineClause node)
    {
        defaultIn(node);
    }

    public void outAConstraintsMachineClause(AConstraintsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstraintsMachineClause(AConstraintsMachineClause node)
    {
        inAConstraintsMachineClause(node);
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        outAConstraintsMachineClause(node);
    }

    public void inAInitialisationMachineClause(AInitialisationMachineClause node)
    {
        defaultIn(node);
    }

    public void outAInitialisationMachineClause(AInitialisationMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitialisationMachineClause(AInitialisationMachineClause node)
    {
        inAInitialisationMachineClause(node);
        if(node.getSubstitutions() != null)
        {
            node.getSubstitutions().apply(this);
        }
        outAInitialisationMachineClause(node);
    }

    public void inAInvariantMachineClause(AInvariantMachineClause node)
    {
        defaultIn(node);
    }

    public void outAInvariantMachineClause(AInvariantMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInvariantMachineClause(AInvariantMachineClause node)
    {
        inAInvariantMachineClause(node);
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        outAInvariantMachineClause(node);
    }

    public void inAAssertionsMachineClause(AAssertionsMachineClause node)
    {
        defaultIn(node);
    }

    public void outAAssertionsMachineClause(AAssertionsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertionsMachineClause(AAssertionsMachineClause node)
    {
        inAAssertionsMachineClause(node);
        {
            List<PPredicate> copy = new ArrayList<PPredicate>(node.getPredicates());
            for(PPredicate e : copy)
            {
                e.apply(this);
            }
        }
        outAAssertionsMachineClause(node);
    }

    public void inAValuesMachineClause(AValuesMachineClause node)
    {
        defaultIn(node);
    }

    public void outAValuesMachineClause(AValuesMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValuesMachineClause(AValuesMachineClause node)
    {
        inAValuesMachineClause(node);
        {
            List<PValuesEntry> copy = new ArrayList<PValuesEntry>(node.getEntries());
            for(PValuesEntry e : copy)
            {
                e.apply(this);
            }
        }
        outAValuesMachineClause(node);
    }

    public void inALocalOperationsMachineClause(ALocalOperationsMachineClause node)
    {
        defaultIn(node);
    }

    public void outALocalOperationsMachineClause(ALocalOperationsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalOperationsMachineClause(ALocalOperationsMachineClause node)
    {
        inALocalOperationsMachineClause(node);
        {
            List<POperation> copy = new ArrayList<POperation>(node.getOperations());
            for(POperation e : copy)
            {
                e.apply(this);
            }
        }
        outALocalOperationsMachineClause(node);
    }

    public void inAOperationsMachineClause(AOperationsMachineClause node)
    {
        defaultIn(node);
    }

    public void outAOperationsMachineClause(AOperationsMachineClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperationsMachineClause(AOperationsMachineClause node)
    {
        inAOperationsMachineClause(node);
        {
            List<POperation> copy = new ArrayList<POperation>(node.getOperations());
            for(POperation e : copy)
            {
                e.apply(this);
            }
        }
        outAOperationsMachineClause(node);
    }

    public void inAMachineReference(AMachineReference node)
    {
        defaultIn(node);
    }

    public void outAMachineReference(AMachineReference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMachineReference(AMachineReference node)
    {
        inAMachineReference(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getMachineName());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAMachineReference(node);
    }

    public void inAPredicateDefinition(APredicateDefinition node)
    {
        defaultIn(node);
    }

    public void outAPredicateDefinition(APredicateDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPredicateDefinition(APredicateDefinition node)
    {
        inAPredicateDefinition(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAPredicateDefinition(node);
    }

    public void inASubstitutionDefinition(ASubstitutionDefinition node)
    {
        defaultIn(node);
    }

    public void outASubstitutionDefinition(ASubstitutionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubstitutionDefinition(ASubstitutionDefinition node)
    {
        inASubstitutionDefinition(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outASubstitutionDefinition(node);
    }

    public void inAExpressionDefinition(AExpressionDefinition node)
    {
        defaultIn(node);
    }

    public void outAExpressionDefinition(AExpressionDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionDefinition(AExpressionDefinition node)
    {
        inAExpressionDefinition(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        outAExpressionDefinition(node);
    }

    public void inAFileDefinition(AFileDefinition node)
    {
        defaultIn(node);
    }

    public void outAFileDefinition(AFileDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFileDefinition(AFileDefinition node)
    {
        inAFileDefinition(node);
        if(node.getFilename() != null)
        {
            node.getFilename().apply(this);
        }
        outAFileDefinition(node);
    }

    public void inADeferredSet(ADeferredSet node)
    {
        defaultIn(node);
    }

    public void outADeferredSet(ADeferredSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeferredSet(ADeferredSet node)
    {
        inADeferredSet(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getIdentifier());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        outADeferredSet(node);
    }

    public void inAEnumeratedSet(AEnumeratedSet node)
    {
        defaultIn(node);
    }

    public void outAEnumeratedSet(AEnumeratedSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumeratedSet(AEnumeratedSet node)
    {
        inAEnumeratedSet(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getIdentifier());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getElements());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAEnumeratedSet(node);
    }

    public void inAValuesEntry(AValuesEntry node)
    {
        defaultIn(node);
    }

    public void outAValuesEntry(AValuesEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValuesEntry(AValuesEntry node)
    {
        inAValuesEntry(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getIdentifier());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValuesEntry(node);
    }

    public void inAOperation(AOperation node)
    {
        defaultIn(node);
    }

    public void outAOperation(AOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperation(AOperation node)
    {
        inAOperation(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getReturnValues());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getOpName());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOperationBody() != null)
        {
            node.getOperationBody().apply(this);
        }
        outAOperation(node);
    }

    public void inAEvent(AEvent node)
    {
        defaultIn(node);
    }

    public void outAEvent(AEvent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEvent(AEvent node)
    {
        inAEvent(node);
        if(node.getEventName() != null)
        {
            node.getEventName().apply(this);
        }
        if(node.getStatus() != null)
        {
            node.getStatus().apply(this);
        }
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getRefines());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getVariables());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PPredicate> copy = new ArrayList<PPredicate>(node.getGuards());
            for(PPredicate e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PPredicate> copy = new ArrayList<PPredicate>(node.getTheorems());
            for(PPredicate e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSubstitution> copy = new ArrayList<PSubstitution>(node.getAssignments());
            for(PSubstitution e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PWitness> copy = new ArrayList<PWitness>(node.getWitness());
            for(PWitness e : copy)
            {
                e.apply(this);
            }
        }
        outAEvent(node);
    }

    public void inAWitness(AWitness node)
    {
        defaultIn(node);
    }

    public void outAWitness(AWitness node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWitness(AWitness node)
    {
        inAWitness(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outAWitness(node);
    }

    public void inAOrdinaryEventstatus(AOrdinaryEventstatus node)
    {
        defaultIn(node);
    }

    public void outAOrdinaryEventstatus(AOrdinaryEventstatus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrdinaryEventstatus(AOrdinaryEventstatus node)
    {
        inAOrdinaryEventstatus(node);
        outAOrdinaryEventstatus(node);
    }

    public void inAAnticipatedEventstatus(AAnticipatedEventstatus node)
    {
        defaultIn(node);
    }

    public void outAAnticipatedEventstatus(AAnticipatedEventstatus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnticipatedEventstatus(AAnticipatedEventstatus node)
    {
        inAAnticipatedEventstatus(node);
        outAAnticipatedEventstatus(node);
    }

    public void inAConvergentEventstatus(AConvergentEventstatus node)
    {
        defaultIn(node);
    }

    public void outAConvergentEventstatus(AConvergentEventstatus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConvergentEventstatus(AConvergentEventstatus node)
    {
        inAConvergentEventstatus(node);
        outAConvergentEventstatus(node);
    }

    public void inAConjunctPredicate(AConjunctPredicate node)
    {
        defaultIn(node);
    }

    public void outAConjunctPredicate(AConjunctPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConjunctPredicate(AConjunctPredicate node)
    {
        inAConjunctPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAConjunctPredicate(node);
    }

    public void inANegationPredicate(ANegationPredicate node)
    {
        defaultIn(node);
    }

    public void outANegationPredicate(ANegationPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegationPredicate(ANegationPredicate node)
    {
        inANegationPredicate(node);
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outANegationPredicate(node);
    }

    public void inADisjunctPredicate(ADisjunctPredicate node)
    {
        defaultIn(node);
    }

    public void outADisjunctPredicate(ADisjunctPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisjunctPredicate(ADisjunctPredicate node)
    {
        inADisjunctPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADisjunctPredicate(node);
    }

    public void inAImplicationPredicate(AImplicationPredicate node)
    {
        defaultIn(node);
    }

    public void outAImplicationPredicate(AImplicationPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImplicationPredicate(AImplicationPredicate node)
    {
        inAImplicationPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAImplicationPredicate(node);
    }

    public void inAEquivalencePredicate(AEquivalencePredicate node)
    {
        defaultIn(node);
    }

    public void outAEquivalencePredicate(AEquivalencePredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquivalencePredicate(AEquivalencePredicate node)
    {
        inAEquivalencePredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEquivalencePredicate(node);
    }

    public void inAUniversalQuantificationPredicate(AUniversalQuantificationPredicate node)
    {
        defaultIn(node);
    }

    public void outAUniversalQuantificationPredicate(AUniversalQuantificationPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniversalQuantificationPredicate(AUniversalQuantificationPredicate node)
    {
        inAUniversalQuantificationPredicate(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getImplication() != null)
        {
            node.getImplication().apply(this);
        }
        outAUniversalQuantificationPredicate(node);
    }

    public void inAExistentialQuantificationPredicate(AExistentialQuantificationPredicate node)
    {
        defaultIn(node);
    }

    public void outAExistentialQuantificationPredicate(AExistentialQuantificationPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExistentialQuantificationPredicate(AExistentialQuantificationPredicate node)
    {
        inAExistentialQuantificationPredicate(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outAExistentialQuantificationPredicate(node);
    }

    public void inAEqualPredicate(AEqualPredicate node)
    {
        defaultIn(node);
    }

    public void outAEqualPredicate(AEqualPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualPredicate(AEqualPredicate node)
    {
        inAEqualPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqualPredicate(node);
    }

    public void inAUnequalPredicate(AUnequalPredicate node)
    {
        defaultIn(node);
    }

    public void outAUnequalPredicate(AUnequalPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnequalPredicate(AUnequalPredicate node)
    {
        inAUnequalPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAUnequalPredicate(node);
    }

    public void inABelongPredicate(ABelongPredicate node)
    {
        defaultIn(node);
    }

    public void outABelongPredicate(ABelongPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABelongPredicate(ABelongPredicate node)
    {
        inABelongPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outABelongPredicate(node);
    }

    public void inANotBelongPredicate(ANotBelongPredicate node)
    {
        defaultIn(node);
    }

    public void outANotBelongPredicate(ANotBelongPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotBelongPredicate(ANotBelongPredicate node)
    {
        inANotBelongPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANotBelongPredicate(node);
    }

    public void inAIncludePredicate(AIncludePredicate node)
    {
        defaultIn(node);
    }

    public void outAIncludePredicate(AIncludePredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludePredicate(AIncludePredicate node)
    {
        inAIncludePredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIncludePredicate(node);
    }

    public void inAIncludeStrictlyPredicate(AIncludeStrictlyPredicate node)
    {
        defaultIn(node);
    }

    public void outAIncludeStrictlyPredicate(AIncludeStrictlyPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludeStrictlyPredicate(AIncludeStrictlyPredicate node)
    {
        inAIncludeStrictlyPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIncludeStrictlyPredicate(node);
    }

    public void inANotIncludePredicate(ANotIncludePredicate node)
    {
        defaultIn(node);
    }

    public void outANotIncludePredicate(ANotIncludePredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotIncludePredicate(ANotIncludePredicate node)
    {
        inANotIncludePredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANotIncludePredicate(node);
    }

    public void inANotIncludeStrictlyPredicate(ANotIncludeStrictlyPredicate node)
    {
        defaultIn(node);
    }

    public void outANotIncludeStrictlyPredicate(ANotIncludeStrictlyPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotIncludeStrictlyPredicate(ANotIncludeStrictlyPredicate node)
    {
        inANotIncludeStrictlyPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANotIncludeStrictlyPredicate(node);
    }

    public void inALessEqualPredicate(ALessEqualPredicate node)
    {
        defaultIn(node);
    }

    public void outALessEqualPredicate(ALessEqualPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualPredicate(ALessEqualPredicate node)
    {
        inALessEqualPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALessEqualPredicate(node);
    }

    public void inALessPredicate(ALessPredicate node)
    {
        defaultIn(node);
    }

    public void outALessPredicate(ALessPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessPredicate(ALessPredicate node)
    {
        inALessPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALessPredicate(node);
    }

    public void inAGreaterEqualPredicate(AGreaterEqualPredicate node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualPredicate(AGreaterEqualPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualPredicate(AGreaterEqualPredicate node)
    {
        inAGreaterEqualPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGreaterEqualPredicate(node);
    }

    public void inAGreaterPredicate(AGreaterPredicate node)
    {
        defaultIn(node);
    }

    public void outAGreaterPredicate(AGreaterPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterPredicate(AGreaterPredicate node)
    {
        inAGreaterPredicate(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGreaterPredicate(node);
    }

    public void inATruePredicate(ATruePredicate node)
    {
        defaultIn(node);
    }

    public void outATruePredicate(ATruePredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATruePredicate(ATruePredicate node)
    {
        inATruePredicate(node);
        outATruePredicate(node);
    }

    public void inAFalsePredicate(AFalsePredicate node)
    {
        defaultIn(node);
    }

    public void outAFalsePredicate(AFalsePredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsePredicate(AFalsePredicate node)
    {
        inAFalsePredicate(node);
        outAFalsePredicate(node);
    }

    public void inAFinitePredicate(AFinitePredicate node)
    {
        defaultIn(node);
    }

    public void outAFinitePredicate(AFinitePredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinitePredicate(AFinitePredicate node)
    {
        inAFinitePredicate(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        outAFinitePredicate(node);
    }

    public void inAPartitionPredicate(APartitionPredicate node)
    {
        defaultIn(node);
    }

    public void outAPartitionPredicate(APartitionPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartitionPredicate(APartitionPredicate node)
    {
        inAPartitionPredicate(node);
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getElements());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAPartitionPredicate(node);
    }

    public void inADefinitionPredicate(ADefinitionPredicate node)
    {
        defaultIn(node);
    }

    public void outADefinitionPredicate(ADefinitionPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionPredicate(ADefinitionPredicate node)
    {
        inADefinitionPredicate(node);
        if(node.getDefLiteral() != null)
        {
            node.getDefLiteral().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outADefinitionPredicate(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getIdentifier());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        outAIdentifierExpression(node);
    }

    public void inAPrimedIdentifierExpression(APrimedIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAPrimedIdentifierExpression(APrimedIdentifierExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimedIdentifierExpression(APrimedIdentifierExpression node)
    {
        inAPrimedIdentifierExpression(node);
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getIdentifier());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getGrade() != null)
        {
            node.getGrade().apply(this);
        }
        outAPrimedIdentifierExpression(node);
    }

    public void inAStringExpression(AStringExpression node)
    {
        defaultIn(node);
    }

    public void outAStringExpression(AStringExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpression(AStringExpression node)
    {
        inAStringExpression(node);
        if(node.getContent() != null)
        {
            node.getContent().apply(this);
        }
        outAStringExpression(node);
    }

    public void inATrueExpression(ATrueExpression node)
    {
        defaultIn(node);
    }

    public void outATrueExpression(ATrueExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpression(ATrueExpression node)
    {
        inATrueExpression(node);
        outATrueExpression(node);
    }

    public void inAFalseExpression(AFalseExpression node)
    {
        defaultIn(node);
    }

    public void outAFalseExpression(AFalseExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpression(AFalseExpression node)
    {
        inAFalseExpression(node);
        outAFalseExpression(node);
    }

    public void inAIntegerExpression(AIntegerExpression node)
    {
        defaultIn(node);
    }

    public void outAIntegerExpression(AIntegerExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerExpression(AIntegerExpression node)
    {
        inAIntegerExpression(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outAIntegerExpression(node);
    }

    public void inAMaxIntExpression(AMaxIntExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxIntExpression(AMaxIntExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaxIntExpression(AMaxIntExpression node)
    {
        inAMaxIntExpression(node);
        outAMaxIntExpression(node);
    }

    public void inAMinIntExpression(AMinIntExpression node)
    {
        defaultIn(node);
    }

    public void outAMinIntExpression(AMinIntExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinIntExpression(AMinIntExpression node)
    {
        inAMinIntExpression(node);
        outAMinIntExpression(node);
    }

    public void inAEmptySetExpression(AEmptySetExpression node)
    {
        defaultIn(node);
    }

    public void outAEmptySetExpression(AEmptySetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySetExpression(AEmptySetExpression node)
    {
        inAEmptySetExpression(node);
        outAEmptySetExpression(node);
    }

    public void inAIntegerSetExpression(AIntegerSetExpression node)
    {
        defaultIn(node);
    }

    public void outAIntegerSetExpression(AIntegerSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerSetExpression(AIntegerSetExpression node)
    {
        inAIntegerSetExpression(node);
        outAIntegerSetExpression(node);
    }

    public void inANaturalSetExpression(ANaturalSetExpression node)
    {
        defaultIn(node);
    }

    public void outANaturalSetExpression(ANaturalSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaturalSetExpression(ANaturalSetExpression node)
    {
        inANaturalSetExpression(node);
        outANaturalSetExpression(node);
    }

    public void inANatural1SetExpression(ANatural1SetExpression node)
    {
        defaultIn(node);
    }

    public void outANatural1SetExpression(ANatural1SetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANatural1SetExpression(ANatural1SetExpression node)
    {
        inANatural1SetExpression(node);
        outANatural1SetExpression(node);
    }

    public void inANatSetExpression(ANatSetExpression node)
    {
        defaultIn(node);
    }

    public void outANatSetExpression(ANatSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANatSetExpression(ANatSetExpression node)
    {
        inANatSetExpression(node);
        outANatSetExpression(node);
    }

    public void inANat1SetExpression(ANat1SetExpression node)
    {
        defaultIn(node);
    }

    public void outANat1SetExpression(ANat1SetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANat1SetExpression(ANat1SetExpression node)
    {
        inANat1SetExpression(node);
        outANat1SetExpression(node);
    }

    public void inAIntSetExpression(AIntSetExpression node)
    {
        defaultIn(node);
    }

    public void outAIntSetExpression(AIntSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntSetExpression(AIntSetExpression node)
    {
        inAIntSetExpression(node);
        outAIntSetExpression(node);
    }

    public void inABoolSetExpression(ABoolSetExpression node)
    {
        defaultIn(node);
    }

    public void outABoolSetExpression(ABoolSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolSetExpression(ABoolSetExpression node)
    {
        inABoolSetExpression(node);
        outABoolSetExpression(node);
    }

    public void inAStringSetExpression(AStringSetExpression node)
    {
        defaultIn(node);
    }

    public void outAStringSetExpression(AStringSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringSetExpression(AStringSetExpression node)
    {
        inAStringSetExpression(node);
        outAStringSetExpression(node);
    }

    public void inAConvertBoolExpression(AConvertBoolExpression node)
    {
        defaultIn(node);
    }

    public void outAConvertBoolExpression(AConvertBoolExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConvertBoolExpression(AConvertBoolExpression node)
    {
        inAConvertBoolExpression(node);
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outAConvertBoolExpression(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAddExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAMinusOrSetSubtractExpression(AMinusOrSetSubtractExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusOrSetSubtractExpression(AMinusOrSetSubtractExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOrSetSubtractExpression(AMinusOrSetSubtractExpression node)
    {
        inAMinusOrSetSubtractExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMinusOrSetSubtractExpression(node);
    }

    public void inAUnaryExpression(AUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryExpression(AUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExpression(AUnaryExpression node)
    {
        inAUnaryExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAUnaryExpression(node);
    }

    public void inAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        inAMultiplicationExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultiplicationExpression(node);
    }

    public void inACartesianProductExpression(ACartesianProductExpression node)
    {
        defaultIn(node);
    }

    public void outACartesianProductExpression(ACartesianProductExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACartesianProductExpression(ACartesianProductExpression node)
    {
        inACartesianProductExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outACartesianProductExpression(node);
    }

    public void inAMultOrCartExpression(AMultOrCartExpression node)
    {
        defaultIn(node);
    }

    public void outAMultOrCartExpression(AMultOrCartExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOrCartExpression(AMultOrCartExpression node)
    {
        inAMultOrCartExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultOrCartExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExpression(node);
    }

    public void inAModuloExpression(AModuloExpression node)
    {
        defaultIn(node);
    }

    public void outAModuloExpression(AModuloExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloExpression(AModuloExpression node)
    {
        inAModuloExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModuloExpression(node);
    }

    public void inAPowerOfExpression(APowerOfExpression node)
    {
        defaultIn(node);
    }

    public void outAPowerOfExpression(APowerOfExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPowerOfExpression(APowerOfExpression node)
    {
        inAPowerOfExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPowerOfExpression(node);
    }

    public void inASuccessorExpression(ASuccessorExpression node)
    {
        defaultIn(node);
    }

    public void outASuccessorExpression(ASuccessorExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuccessorExpression(ASuccessorExpression node)
    {
        inASuccessorExpression(node);
        outASuccessorExpression(node);
    }

    public void inAPredecessorExpression(APredecessorExpression node)
    {
        defaultIn(node);
    }

    public void outAPredecessorExpression(APredecessorExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPredecessorExpression(APredecessorExpression node)
    {
        inAPredecessorExpression(node);
        outAPredecessorExpression(node);
    }

    public void inAMaxExpression(AMaxExpression node)
    {
        defaultIn(node);
    }

    public void outAMaxExpression(AMaxExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaxExpression(AMaxExpression node)
    {
        inAMaxExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMaxExpression(node);
    }

    public void inAMinExpression(AMinExpression node)
    {
        defaultIn(node);
    }

    public void outAMinExpression(AMinExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinExpression(AMinExpression node)
    {
        inAMinExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMinExpression(node);
    }

    public void inACardExpression(ACardExpression node)
    {
        defaultIn(node);
    }

    public void outACardExpression(ACardExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACardExpression(ACardExpression node)
    {
        inACardExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACardExpression(node);
    }

    public void inAGeneralSumExpression(AGeneralSumExpression node)
    {
        defaultIn(node);
    }

    public void outAGeneralSumExpression(AGeneralSumExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralSumExpression(AGeneralSumExpression node)
    {
        inAGeneralSumExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGeneralSumExpression(node);
    }

    public void inAGeneralProductExpression(AGeneralProductExpression node)
    {
        defaultIn(node);
    }

    public void outAGeneralProductExpression(AGeneralProductExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralProductExpression(AGeneralProductExpression node)
    {
        inAGeneralProductExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGeneralProductExpression(node);
    }

    public void inACoupleExpression(ACoupleExpression node)
    {
        defaultIn(node);
    }

    public void outACoupleExpression(ACoupleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoupleExpression(ACoupleExpression node)
    {
        inACoupleExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getList());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outACoupleExpression(node);
    }

    public void inAComprehensionSetExpression(AComprehensionSetExpression node)
    {
        defaultIn(node);
    }

    public void outAComprehensionSetExpression(AComprehensionSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComprehensionSetExpression(AComprehensionSetExpression node)
    {
        inAComprehensionSetExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        outAComprehensionSetExpression(node);
    }

    public void inAProverComprehensionSetExpression(AProverComprehensionSetExpression node)
    {
        defaultIn(node);
    }

    public void outAProverComprehensionSetExpression(AProverComprehensionSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProverComprehensionSetExpression(AProverComprehensionSetExpression node)
    {
        inAProverComprehensionSetExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        outAProverComprehensionSetExpression(node);
    }

    public void inAEventBComprehensionSetExpression(AEventBComprehensionSetExpression node)
    {
        defaultIn(node);
    }

    public void outAEventBComprehensionSetExpression(AEventBComprehensionSetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventBComprehensionSetExpression(AEventBComprehensionSetExpression node)
    {
        inAEventBComprehensionSetExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        outAEventBComprehensionSetExpression(node);
    }

    public void inAPowSubsetExpression(APowSubsetExpression node)
    {
        defaultIn(node);
    }

    public void outAPowSubsetExpression(APowSubsetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPowSubsetExpression(APowSubsetExpression node)
    {
        inAPowSubsetExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPowSubsetExpression(node);
    }

    public void inAPow1SubsetExpression(APow1SubsetExpression node)
    {
        defaultIn(node);
    }

    public void outAPow1SubsetExpression(APow1SubsetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPow1SubsetExpression(APow1SubsetExpression node)
    {
        inAPow1SubsetExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPow1SubsetExpression(node);
    }

    public void inAFinSubsetExpression(AFinSubsetExpression node)
    {
        defaultIn(node);
    }

    public void outAFinSubsetExpression(AFinSubsetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinSubsetExpression(AFinSubsetExpression node)
    {
        inAFinSubsetExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAFinSubsetExpression(node);
    }

    public void inAFin1SubsetExpression(AFin1SubsetExpression node)
    {
        defaultIn(node);
    }

    public void outAFin1SubsetExpression(AFin1SubsetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFin1SubsetExpression(AFin1SubsetExpression node)
    {
        inAFin1SubsetExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAFin1SubsetExpression(node);
    }

    public void inASetExtensionExpression(ASetExtensionExpression node)
    {
        defaultIn(node);
    }

    public void outASetExtensionExpression(ASetExtensionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetExtensionExpression(ASetExtensionExpression node)
    {
        inASetExtensionExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpressions());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outASetExtensionExpression(node);
    }

    public void inAIntervalExpression(AIntervalExpression node)
    {
        defaultIn(node);
    }

    public void outAIntervalExpression(AIntervalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntervalExpression(AIntervalExpression node)
    {
        inAIntervalExpression(node);
        if(node.getLeftBorder() != null)
        {
            node.getLeftBorder().apply(this);
        }
        if(node.getRightBorder() != null)
        {
            node.getRightBorder().apply(this);
        }
        outAIntervalExpression(node);
    }

    public void inAUnionExpression(AUnionExpression node)
    {
        defaultIn(node);
    }

    public void outAUnionExpression(AUnionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnionExpression(AUnionExpression node)
    {
        inAUnionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAUnionExpression(node);
    }

    public void inAIntersectionExpression(AIntersectionExpression node)
    {
        defaultIn(node);
    }

    public void outAIntersectionExpression(AIntersectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntersectionExpression(AIntersectionExpression node)
    {
        inAIntersectionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIntersectionExpression(node);
    }

    public void inASetSubtractionExpression(ASetSubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASetSubtractionExpression(ASetSubtractionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetSubtractionExpression(ASetSubtractionExpression node)
    {
        inASetSubtractionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASetSubtractionExpression(node);
    }

    public void inAGeneralUnionExpression(AGeneralUnionExpression node)
    {
        defaultIn(node);
    }

    public void outAGeneralUnionExpression(AGeneralUnionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralUnionExpression(AGeneralUnionExpression node)
    {
        inAGeneralUnionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGeneralUnionExpression(node);
    }

    public void inAGeneralIntersectionExpression(AGeneralIntersectionExpression node)
    {
        defaultIn(node);
    }

    public void outAGeneralIntersectionExpression(AGeneralIntersectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralIntersectionExpression(AGeneralIntersectionExpression node)
    {
        inAGeneralIntersectionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGeneralIntersectionExpression(node);
    }

    public void inAQuantifiedUnionExpression(AQuantifiedUnionExpression node)
    {
        defaultIn(node);
    }

    public void outAQuantifiedUnionExpression(AQuantifiedUnionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuantifiedUnionExpression(AQuantifiedUnionExpression node)
    {
        inAQuantifiedUnionExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAQuantifiedUnionExpression(node);
    }

    public void inAQuantifiedIntersectionExpression(AQuantifiedIntersectionExpression node)
    {
        defaultIn(node);
    }

    public void outAQuantifiedIntersectionExpression(AQuantifiedIntersectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuantifiedIntersectionExpression(AQuantifiedIntersectionExpression node)
    {
        inAQuantifiedIntersectionExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicates() != null)
        {
            node.getPredicates().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAQuantifiedIntersectionExpression(node);
    }

    public void inARelationsExpression(ARelationsExpression node)
    {
        defaultIn(node);
    }

    public void outARelationsExpression(ARelationsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationsExpression(ARelationsExpression node)
    {
        inARelationsExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARelationsExpression(node);
    }

    public void inAIdentityExpression(AIdentityExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentityExpression(AIdentityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentityExpression(AIdentityExpression node)
    {
        inAIdentityExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIdentityExpression(node);
    }

    public void inAEventBIdentityExpression(AEventBIdentityExpression node)
    {
        defaultIn(node);
    }

    public void outAEventBIdentityExpression(AEventBIdentityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventBIdentityExpression(AEventBIdentityExpression node)
    {
        inAEventBIdentityExpression(node);
        outAEventBIdentityExpression(node);
    }

    public void inAReverseExpression(AReverseExpression node)
    {
        defaultIn(node);
    }

    public void outAReverseExpression(AReverseExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReverseExpression(AReverseExpression node)
    {
        inAReverseExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReverseExpression(node);
    }

    public void inAFirstProjectionExpression(AFirstProjectionExpression node)
    {
        defaultIn(node);
    }

    public void outAFirstProjectionExpression(AFirstProjectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFirstProjectionExpression(AFirstProjectionExpression node)
    {
        inAFirstProjectionExpression(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAFirstProjectionExpression(node);
    }

    public void inAEventBFirstProjectionExpression(AEventBFirstProjectionExpression node)
    {
        defaultIn(node);
    }

    public void outAEventBFirstProjectionExpression(AEventBFirstProjectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventBFirstProjectionExpression(AEventBFirstProjectionExpression node)
    {
        inAEventBFirstProjectionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAEventBFirstProjectionExpression(node);
    }

    public void inAEventBFirstProjectionV2Expression(AEventBFirstProjectionV2Expression node)
    {
        defaultIn(node);
    }

    public void outAEventBFirstProjectionV2Expression(AEventBFirstProjectionV2Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventBFirstProjectionV2Expression(AEventBFirstProjectionV2Expression node)
    {
        inAEventBFirstProjectionV2Expression(node);
        outAEventBFirstProjectionV2Expression(node);
    }

    public void inASecondProjectionExpression(ASecondProjectionExpression node)
    {
        defaultIn(node);
    }

    public void outASecondProjectionExpression(ASecondProjectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecondProjectionExpression(ASecondProjectionExpression node)
    {
        inASecondProjectionExpression(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outASecondProjectionExpression(node);
    }

    public void inAEventBSecondProjectionExpression(AEventBSecondProjectionExpression node)
    {
        defaultIn(node);
    }

    public void outAEventBSecondProjectionExpression(AEventBSecondProjectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventBSecondProjectionExpression(AEventBSecondProjectionExpression node)
    {
        inAEventBSecondProjectionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAEventBSecondProjectionExpression(node);
    }

    public void inAEventBSecondProjectionV2Expression(AEventBSecondProjectionV2Expression node)
    {
        defaultIn(node);
    }

    public void outAEventBSecondProjectionV2Expression(AEventBSecondProjectionV2Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventBSecondProjectionV2Expression(AEventBSecondProjectionV2Expression node)
    {
        inAEventBSecondProjectionV2Expression(node);
        outAEventBSecondProjectionV2Expression(node);
    }

    public void inACompositionExpression(ACompositionExpression node)
    {
        defaultIn(node);
    }

    public void outACompositionExpression(ACompositionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompositionExpression(ACompositionExpression node)
    {
        inACompositionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outACompositionExpression(node);
    }

    public void inARingExpression(ARingExpression node)
    {
        defaultIn(node);
    }

    public void outARingExpression(ARingExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARingExpression(ARingExpression node)
    {
        inARingExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARingExpression(node);
    }

    public void inADirectProductExpression(ADirectProductExpression node)
    {
        defaultIn(node);
    }

    public void outADirectProductExpression(ADirectProductExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectProductExpression(ADirectProductExpression node)
    {
        inADirectProductExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADirectProductExpression(node);
    }

    public void inAParallelProductExpression(AParallelProductExpression node)
    {
        defaultIn(node);
    }

    public void outAParallelProductExpression(AParallelProductExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParallelProductExpression(AParallelProductExpression node)
    {
        inAParallelProductExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAParallelProductExpression(node);
    }

    public void inAIterationExpression(AIterationExpression node)
    {
        defaultIn(node);
    }

    public void outAIterationExpression(AIterationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationExpression(AIterationExpression node)
    {
        inAIterationExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIterationExpression(node);
    }

    public void inAReflexiveClosureExpression(AReflexiveClosureExpression node)
    {
        defaultIn(node);
    }

    public void outAReflexiveClosureExpression(AReflexiveClosureExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReflexiveClosureExpression(AReflexiveClosureExpression node)
    {
        inAReflexiveClosureExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReflexiveClosureExpression(node);
    }

    public void inAClosureExpression(AClosureExpression node)
    {
        defaultIn(node);
    }

    public void outAClosureExpression(AClosureExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosureExpression(AClosureExpression node)
    {
        inAClosureExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAClosureExpression(node);
    }

    public void inADomainExpression(ADomainExpression node)
    {
        defaultIn(node);
    }

    public void outADomainExpression(ADomainExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADomainExpression(ADomainExpression node)
    {
        inADomainExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outADomainExpression(node);
    }

    public void inARangeExpression(ARangeExpression node)
    {
        defaultIn(node);
    }

    public void outARangeExpression(ARangeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeExpression(ARangeExpression node)
    {
        inARangeExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outARangeExpression(node);
    }

    public void inAImageExpression(AImageExpression node)
    {
        defaultIn(node);
    }

    public void outAImageExpression(AImageExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImageExpression(AImageExpression node)
    {
        inAImageExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAImageExpression(node);
    }

    public void inADomainRestrictionExpression(ADomainRestrictionExpression node)
    {
        defaultIn(node);
    }

    public void outADomainRestrictionExpression(ADomainRestrictionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADomainRestrictionExpression(ADomainRestrictionExpression node)
    {
        inADomainRestrictionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADomainRestrictionExpression(node);
    }

    public void inADomainSubtractionExpression(ADomainSubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outADomainSubtractionExpression(ADomainSubtractionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADomainSubtractionExpression(ADomainSubtractionExpression node)
    {
        inADomainSubtractionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADomainSubtractionExpression(node);
    }

    public void inARangeRestrictionExpression(ARangeRestrictionExpression node)
    {
        defaultIn(node);
    }

    public void outARangeRestrictionExpression(ARangeRestrictionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeRestrictionExpression(ARangeRestrictionExpression node)
    {
        inARangeRestrictionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARangeRestrictionExpression(node);
    }

    public void inARangeSubtractionExpression(ARangeSubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outARangeSubtractionExpression(ARangeSubtractionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeSubtractionExpression(ARangeSubtractionExpression node)
    {
        inARangeSubtractionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARangeSubtractionExpression(node);
    }

    public void inAOverwriteExpression(AOverwriteExpression node)
    {
        defaultIn(node);
    }

    public void outAOverwriteExpression(AOverwriteExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOverwriteExpression(AOverwriteExpression node)
    {
        inAOverwriteExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOverwriteExpression(node);
    }

    public void inAPartialFunctionExpression(APartialFunctionExpression node)
    {
        defaultIn(node);
    }

    public void outAPartialFunctionExpression(APartialFunctionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartialFunctionExpression(APartialFunctionExpression node)
    {
        inAPartialFunctionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPartialFunctionExpression(node);
    }

    public void inATotalFunctionExpression(ATotalFunctionExpression node)
    {
        defaultIn(node);
    }

    public void outATotalFunctionExpression(ATotalFunctionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotalFunctionExpression(ATotalFunctionExpression node)
    {
        inATotalFunctionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outATotalFunctionExpression(node);
    }

    public void inAPartialInjectionExpression(APartialInjectionExpression node)
    {
        defaultIn(node);
    }

    public void outAPartialInjectionExpression(APartialInjectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartialInjectionExpression(APartialInjectionExpression node)
    {
        inAPartialInjectionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPartialInjectionExpression(node);
    }

    public void inATotalInjectionExpression(ATotalInjectionExpression node)
    {
        defaultIn(node);
    }

    public void outATotalInjectionExpression(ATotalInjectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotalInjectionExpression(ATotalInjectionExpression node)
    {
        inATotalInjectionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outATotalInjectionExpression(node);
    }

    public void inAPartialSurjectionExpression(APartialSurjectionExpression node)
    {
        defaultIn(node);
    }

    public void outAPartialSurjectionExpression(APartialSurjectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartialSurjectionExpression(APartialSurjectionExpression node)
    {
        inAPartialSurjectionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPartialSurjectionExpression(node);
    }

    public void inATotalSurjectionExpression(ATotalSurjectionExpression node)
    {
        defaultIn(node);
    }

    public void outATotalSurjectionExpression(ATotalSurjectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotalSurjectionExpression(ATotalSurjectionExpression node)
    {
        inATotalSurjectionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outATotalSurjectionExpression(node);
    }

    public void inAPartialBijectionExpression(APartialBijectionExpression node)
    {
        defaultIn(node);
    }

    public void outAPartialBijectionExpression(APartialBijectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPartialBijectionExpression(APartialBijectionExpression node)
    {
        inAPartialBijectionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPartialBijectionExpression(node);
    }

    public void inATotalBijectionExpression(ATotalBijectionExpression node)
    {
        defaultIn(node);
    }

    public void outATotalBijectionExpression(ATotalBijectionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotalBijectionExpression(ATotalBijectionExpression node)
    {
        inATotalBijectionExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outATotalBijectionExpression(node);
    }

    public void inATotalRelationExpression(ATotalRelationExpression node)
    {
        defaultIn(node);
    }

    public void outATotalRelationExpression(ATotalRelationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotalRelationExpression(ATotalRelationExpression node)
    {
        inATotalRelationExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outATotalRelationExpression(node);
    }

    public void inASurjectionRelationExpression(ASurjectionRelationExpression node)
    {
        defaultIn(node);
    }

    public void outASurjectionRelationExpression(ASurjectionRelationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASurjectionRelationExpression(ASurjectionRelationExpression node)
    {
        inASurjectionRelationExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASurjectionRelationExpression(node);
    }

    public void inATotalSurjectionRelationExpression(ATotalSurjectionRelationExpression node)
    {
        defaultIn(node);
    }

    public void outATotalSurjectionRelationExpression(ATotalSurjectionRelationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATotalSurjectionRelationExpression(ATotalSurjectionRelationExpression node)
    {
        inATotalSurjectionRelationExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outATotalSurjectionRelationExpression(node);
    }

    public void inALambdaExpression(ALambdaExpression node)
    {
        defaultIn(node);
    }

    public void outALambdaExpression(ALambdaExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALambdaExpression(ALambdaExpression node)
    {
        inALambdaExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALambdaExpression(node);
    }

    public void inATransFunctionExpression(ATransFunctionExpression node)
    {
        defaultIn(node);
    }

    public void outATransFunctionExpression(ATransFunctionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATransFunctionExpression(ATransFunctionExpression node)
    {
        inATransFunctionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATransFunctionExpression(node);
    }

    public void inATransRelationExpression(ATransRelationExpression node)
    {
        defaultIn(node);
    }

    public void outATransRelationExpression(ATransRelationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATransRelationExpression(ATransRelationExpression node)
    {
        inATransRelationExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATransRelationExpression(node);
    }

    public void inASeqExpression(ASeqExpression node)
    {
        defaultIn(node);
    }

    public void outASeqExpression(ASeqExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeqExpression(ASeqExpression node)
    {
        inASeqExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASeqExpression(node);
    }

    public void inASeq1Expression(ASeq1Expression node)
    {
        defaultIn(node);
    }

    public void outASeq1Expression(ASeq1Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeq1Expression(ASeq1Expression node)
    {
        inASeq1Expression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASeq1Expression(node);
    }

    public void inAIseqExpression(AIseqExpression node)
    {
        defaultIn(node);
    }

    public void outAIseqExpression(AIseqExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIseqExpression(AIseqExpression node)
    {
        inAIseqExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIseqExpression(node);
    }

    public void inAIseq1Expression(AIseq1Expression node)
    {
        defaultIn(node);
    }

    public void outAIseq1Expression(AIseq1Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIseq1Expression(AIseq1Expression node)
    {
        inAIseq1Expression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIseq1Expression(node);
    }

    public void inAPermExpression(APermExpression node)
    {
        defaultIn(node);
    }

    public void outAPermExpression(APermExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPermExpression(APermExpression node)
    {
        inAPermExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPermExpression(node);
    }

    public void inAEmptySequenceExpression(AEmptySequenceExpression node)
    {
        defaultIn(node);
    }

    public void outAEmptySequenceExpression(AEmptySequenceExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySequenceExpression(AEmptySequenceExpression node)
    {
        inAEmptySequenceExpression(node);
        outAEmptySequenceExpression(node);
    }

    public void inASequenceExtensionExpression(ASequenceExtensionExpression node)
    {
        defaultIn(node);
    }

    public void outASequenceExtensionExpression(ASequenceExtensionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceExtensionExpression(ASequenceExtensionExpression node)
    {
        inASequenceExtensionExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outASequenceExtensionExpression(node);
    }

    public void inASizeExpression(ASizeExpression node)
    {
        defaultIn(node);
    }

    public void outASizeExpression(ASizeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizeExpression(ASizeExpression node)
    {
        inASizeExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASizeExpression(node);
    }

    public void inAFirstExpression(AFirstExpression node)
    {
        defaultIn(node);
    }

    public void outAFirstExpression(AFirstExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFirstExpression(AFirstExpression node)
    {
        inAFirstExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAFirstExpression(node);
    }

    public void inALastExpression(ALastExpression node)
    {
        defaultIn(node);
    }

    public void outALastExpression(ALastExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALastExpression(ALastExpression node)
    {
        inALastExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALastExpression(node);
    }

    public void inAFrontExpression(AFrontExpression node)
    {
        defaultIn(node);
    }

    public void outAFrontExpression(AFrontExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFrontExpression(AFrontExpression node)
    {
        inAFrontExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAFrontExpression(node);
    }

    public void inATailExpression(ATailExpression node)
    {
        defaultIn(node);
    }

    public void outATailExpression(ATailExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATailExpression(ATailExpression node)
    {
        inATailExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATailExpression(node);
    }

    public void inARevExpression(ARevExpression node)
    {
        defaultIn(node);
    }

    public void outARevExpression(ARevExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARevExpression(ARevExpression node)
    {
        inARevExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outARevExpression(node);
    }

    public void inAConcatExpression(AConcatExpression node)
    {
        defaultIn(node);
    }

    public void outAConcatExpression(AConcatExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatExpression(AConcatExpression node)
    {
        inAConcatExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAConcatExpression(node);
    }

    public void inAInsertFrontExpression(AInsertFrontExpression node)
    {
        defaultIn(node);
    }

    public void outAInsertFrontExpression(AInsertFrontExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInsertFrontExpression(AInsertFrontExpression node)
    {
        inAInsertFrontExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAInsertFrontExpression(node);
    }

    public void inAInsertTailExpression(AInsertTailExpression node)
    {
        defaultIn(node);
    }

    public void outAInsertTailExpression(AInsertTailExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInsertTailExpression(AInsertTailExpression node)
    {
        inAInsertTailExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAInsertTailExpression(node);
    }

    public void inARestrictFrontExpression(ARestrictFrontExpression node)
    {
        defaultIn(node);
    }

    public void outARestrictFrontExpression(ARestrictFrontExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestrictFrontExpression(ARestrictFrontExpression node)
    {
        inARestrictFrontExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARestrictFrontExpression(node);
    }

    public void inARestrictTailExpression(ARestrictTailExpression node)
    {
        defaultIn(node);
    }

    public void outARestrictTailExpression(ARestrictTailExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARestrictTailExpression(ARestrictTailExpression node)
    {
        inARestrictTailExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARestrictTailExpression(node);
    }

    public void inAGeneralConcatExpression(AGeneralConcatExpression node)
    {
        defaultIn(node);
    }

    public void outAGeneralConcatExpression(AGeneralConcatExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeneralConcatExpression(AGeneralConcatExpression node)
    {
        inAGeneralConcatExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAGeneralConcatExpression(node);
    }

    public void inADefinitionExpression(ADefinitionExpression node)
    {
        defaultIn(node);
    }

    public void outADefinitionExpression(ADefinitionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionExpression(ADefinitionExpression node)
    {
        inADefinitionExpression(node);
        if(node.getDefLiteral() != null)
        {
            node.getDefLiteral().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outADefinitionExpression(node);
    }

    public void inAFunctionExpression(AFunctionExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpression(AFunctionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpression(AFunctionExpression node)
    {
        inAFunctionExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAFunctionExpression(node);
    }

    public void inATreeExpression(ATreeExpression node)
    {
        defaultIn(node);
    }

    public void outATreeExpression(ATreeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATreeExpression(ATreeExpression node)
    {
        inATreeExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATreeExpression(node);
    }

    public void inABtreeExpression(ABtreeExpression node)
    {
        defaultIn(node);
    }

    public void outABtreeExpression(ABtreeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABtreeExpression(ABtreeExpression node)
    {
        inABtreeExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outABtreeExpression(node);
    }

    public void inAConstExpression(AConstExpression node)
    {
        defaultIn(node);
    }

    public void outAConstExpression(AConstExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstExpression(AConstExpression node)
    {
        inAConstExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAConstExpression(node);
    }

    public void inATopExpression(ATopExpression node)
    {
        defaultIn(node);
    }

    public void outATopExpression(ATopExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATopExpression(ATopExpression node)
    {
        inATopExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outATopExpression(node);
    }

    public void inASonsExpression(ASonsExpression node)
    {
        defaultIn(node);
    }

    public void outASonsExpression(ASonsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASonsExpression(ASonsExpression node)
    {
        inASonsExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASonsExpression(node);
    }

    public void inAPrefixExpression(APrefixExpression node)
    {
        defaultIn(node);
    }

    public void outAPrefixExpression(APrefixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefixExpression(APrefixExpression node)
    {
        inAPrefixExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPrefixExpression(node);
    }

    public void inAPostfixExpression(APostfixExpression node)
    {
        defaultIn(node);
    }

    public void outAPostfixExpression(APostfixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostfixExpression(APostfixExpression node)
    {
        inAPostfixExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPostfixExpression(node);
    }

    public void inASizetExpression(ASizetExpression node)
    {
        defaultIn(node);
    }

    public void outASizetExpression(ASizetExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizetExpression(ASizetExpression node)
    {
        inASizetExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASizetExpression(node);
    }

    public void inAMirrorExpression(AMirrorExpression node)
    {
        defaultIn(node);
    }

    public void outAMirrorExpression(AMirrorExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMirrorExpression(AMirrorExpression node)
    {
        inAMirrorExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMirrorExpression(node);
    }

    public void inARankExpression(ARankExpression node)
    {
        defaultIn(node);
    }

    public void outARankExpression(ARankExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARankExpression(ARankExpression node)
    {
        inARankExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outARankExpression(node);
    }

    public void inAFatherExpression(AFatherExpression node)
    {
        defaultIn(node);
    }

    public void outAFatherExpression(AFatherExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatherExpression(AFatherExpression node)
    {
        inAFatherExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAFatherExpression(node);
    }

    public void inASonExpression(ASonExpression node)
    {
        defaultIn(node);
    }

    public void outASonExpression(ASonExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASonExpression(ASonExpression node)
    {
        inASonExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outASonExpression(node);
    }

    public void inASubtreeExpression(ASubtreeExpression node)
    {
        defaultIn(node);
    }

    public void outASubtreeExpression(ASubtreeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtreeExpression(ASubtreeExpression node)
    {
        inASubtreeExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outASubtreeExpression(node);
    }

    public void inAArityExpression(AArityExpression node)
    {
        defaultIn(node);
    }

    public void outAArityExpression(AArityExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArityExpression(AArityExpression node)
    {
        inAArityExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAArityExpression(node);
    }

    public void inABinExpression(ABinExpression node)
    {
        defaultIn(node);
    }

    public void outABinExpression(ABinExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinExpression(ABinExpression node)
    {
        inABinExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outABinExpression(node);
    }

    public void inALeftExpression(ALeftExpression node)
    {
        defaultIn(node);
    }

    public void outALeftExpression(ALeftExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftExpression(ALeftExpression node)
    {
        inALeftExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALeftExpression(node);
    }

    public void inARightExpression(ARightExpression node)
    {
        defaultIn(node);
    }

    public void outARightExpression(ARightExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightExpression(ARightExpression node)
    {
        inARightExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outARightExpression(node);
    }

    public void inAInfixExpression(AInfixExpression node)
    {
        defaultIn(node);
    }

    public void outAInfixExpression(AInfixExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfixExpression(AInfixExpression node)
    {
        inAInfixExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAInfixExpression(node);
    }

    public void inAStructExpression(AStructExpression node)
    {
        defaultIn(node);
    }

    public void outAStructExpression(AStructExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructExpression(AStructExpression node)
    {
        inAStructExpression(node);
        {
            List<PRecEntry> copy = new ArrayList<PRecEntry>(node.getEntries());
            for(PRecEntry e : copy)
            {
                e.apply(this);
            }
        }
        outAStructExpression(node);
    }

    public void inARecExpression(ARecExpression node)
    {
        defaultIn(node);
    }

    public void outARecExpression(ARecExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecExpression(ARecExpression node)
    {
        inARecExpression(node);
        {
            List<PRecEntry> copy = new ArrayList<PRecEntry>(node.getEntries());
            for(PRecEntry e : copy)
            {
                e.apply(this);
            }
        }
        outARecExpression(node);
    }

    public void inARecordFieldExpression(ARecordFieldExpression node)
    {
        defaultIn(node);
    }

    public void outARecordFieldExpression(ARecordFieldExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecordFieldExpression(ARecordFieldExpression node)
    {
        inARecordFieldExpression(node);
        if(node.getRecord() != null)
        {
            node.getRecord().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outARecordFieldExpression(node);
    }

    public void inARecEntry(ARecEntry node)
    {
        defaultIn(node);
    }

    public void outARecEntry(ARecEntry node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecEntry(ARecEntry node)
    {
        inARecEntry(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outARecEntry(node);
    }

    public void inABlockSubstitution(ABlockSubstitution node)
    {
        defaultIn(node);
    }

    public void outABlockSubstitution(ABlockSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockSubstitution(ABlockSubstitution node)
    {
        inABlockSubstitution(node);
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outABlockSubstitution(node);
    }

    public void inASkipSubstitution(ASkipSubstitution node)
    {
        defaultIn(node);
    }

    public void outASkipSubstitution(ASkipSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASkipSubstitution(ASkipSubstitution node)
    {
        inASkipSubstitution(node);
        outASkipSubstitution(node);
    }

    public void inAAssignSubstitution(AAssignSubstitution node)
    {
        defaultIn(node);
    }

    public void outAAssignSubstitution(AAssignSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignSubstitution(AAssignSubstitution node)
    {
        inAAssignSubstitution(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getLhsExpression());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getRhsExpressions());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAAssignSubstitution(node);
    }

    public void inAPreconditionSubstitution(APreconditionSubstitution node)
    {
        defaultIn(node);
    }

    public void outAPreconditionSubstitution(APreconditionSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreconditionSubstitution(APreconditionSubstitution node)
    {
        inAPreconditionSubstitution(node);
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outAPreconditionSubstitution(node);
    }

    public void inAAssertionSubstitution(AAssertionSubstitution node)
    {
        defaultIn(node);
    }

    public void outAAssertionSubstitution(AAssertionSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssertionSubstitution(AAssertionSubstitution node)
    {
        inAAssertionSubstitution(node);
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outAAssertionSubstitution(node);
    }

    public void inAChoiceSubstitution(AChoiceSubstitution node)
    {
        defaultIn(node);
    }

    public void outAChoiceSubstitution(AChoiceSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChoiceSubstitution(AChoiceSubstitution node)
    {
        inAChoiceSubstitution(node);
        {
            List<PSubstitution> copy = new ArrayList<PSubstitution>(node.getSubstitutions());
            for(PSubstitution e : copy)
            {
                e.apply(this);
            }
        }
        outAChoiceSubstitution(node);
    }

    public void inAChoiceOrSubstitution(AChoiceOrSubstitution node)
    {
        defaultIn(node);
    }

    public void outAChoiceOrSubstitution(AChoiceOrSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChoiceOrSubstitution(AChoiceOrSubstitution node)
    {
        inAChoiceOrSubstitution(node);
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outAChoiceOrSubstitution(node);
    }

    public void inAIfSubstitution(AIfSubstitution node)
    {
        defaultIn(node);
    }

    public void outAIfSubstitution(AIfSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfSubstitution(AIfSubstitution node)
    {
        inAIfSubstitution(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        {
            List<PSubstitution> copy = new ArrayList<PSubstitution>(node.getElsifSubstitutions());
            for(PSubstitution e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfSubstitution(node);
    }

    public void inAIfElsifSubstitution(AIfElsifSubstitution node)
    {
        defaultIn(node);
    }

    public void outAIfElsifSubstitution(AIfElsifSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElsifSubstitution(AIfElsifSubstitution node)
    {
        inAIfElsifSubstitution(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getThenSubstitution() != null)
        {
            node.getThenSubstitution().apply(this);
        }
        outAIfElsifSubstitution(node);
    }

    public void inASelectSubstitution(ASelectSubstitution node)
    {
        defaultIn(node);
    }

    public void outASelectSubstitution(ASelectSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectSubstitution(ASelectSubstitution node)
    {
        inASelectSubstitution(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        {
            List<PSubstitution> copy = new ArrayList<PSubstitution>(node.getWhenSubstitutions());
            for(PSubstitution e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outASelectSubstitution(node);
    }

    public void inASelectWhenSubstitution(ASelectWhenSubstitution node)
    {
        defaultIn(node);
    }

    public void outASelectWhenSubstitution(ASelectWhenSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectWhenSubstitution(ASelectWhenSubstitution node)
    {
        inASelectWhenSubstitution(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outASelectWhenSubstitution(node);
    }

    public void inACaseSubstitution(ACaseSubstitution node)
    {
        defaultIn(node);
    }

    public void outACaseSubstitution(ACaseSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseSubstitution(ACaseSubstitution node)
    {
        inACaseSubstitution(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getEitherExpr());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEitherSubst() != null)
        {
            node.getEitherSubst().apply(this);
        }
        {
            List<PSubstitution> copy = new ArrayList<PSubstitution>(node.getOrSubstitutions());
            for(PSubstitution e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outACaseSubstitution(node);
    }

    public void inACaseOrSubstitution(ACaseOrSubstitution node)
    {
        defaultIn(node);
    }

    public void outACaseOrSubstitution(ACaseOrSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseOrSubstitution(ACaseOrSubstitution node)
    {
        inACaseOrSubstitution(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpressions());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outACaseOrSubstitution(node);
    }

    public void inAAnySubstitution(AAnySubstitution node)
    {
        defaultIn(node);
    }

    public void outAAnySubstitution(AAnySubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnySubstitution(AAnySubstitution node)
    {
        inAAnySubstitution(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getWhere() != null)
        {
            node.getWhere().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outAAnySubstitution(node);
    }

    public void inALetSubstitution(ALetSubstitution node)
    {
        defaultIn(node);
    }

    public void outALetSubstitution(ALetSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALetSubstitution(ALetSubstitution node)
    {
        inALetSubstitution(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outALetSubstitution(node);
    }

    public void inABecomesElementOfSubstitution(ABecomesElementOfSubstitution node)
    {
        defaultIn(node);
    }

    public void outABecomesElementOfSubstitution(ABecomesElementOfSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABecomesElementOfSubstitution(ABecomesElementOfSubstitution node)
    {
        inABecomesElementOfSubstitution(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSet() != null)
        {
            node.getSet().apply(this);
        }
        outABecomesElementOfSubstitution(node);
    }

    public void inABecomesSuchSubstitution(ABecomesSuchSubstitution node)
    {
        defaultIn(node);
    }

    public void outABecomesSuchSubstitution(ABecomesSuchSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABecomesSuchSubstitution(ABecomesSuchSubstitution node)
    {
        inABecomesSuchSubstitution(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outABecomesSuchSubstitution(node);
    }

    public void inAVarSubstitution(AVarSubstitution node)
    {
        defaultIn(node);
    }

    public void outAVarSubstitution(AVarSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSubstitution(AVarSubstitution node)
    {
        inAVarSubstitution(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSubstitution() != null)
        {
            node.getSubstitution().apply(this);
        }
        outAVarSubstitution(node);
    }

    public void inASequenceSubstitution(ASequenceSubstitution node)
    {
        defaultIn(node);
    }

    public void outASequenceSubstitution(ASequenceSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceSubstitution(ASequenceSubstitution node)
    {
        inASequenceSubstitution(node);
        {
            List<PSubstitution> copy = new ArrayList<PSubstitution>(node.getSubstitutions());
            for(PSubstitution e : copy)
            {
                e.apply(this);
            }
        }
        outASequenceSubstitution(node);
    }

    public void inAFuncOpSubstitution(AFuncOpSubstitution node)
    {
        defaultIn(node);
    }

    public void outAFuncOpSubstitution(AFuncOpSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncOpSubstitution(AFuncOpSubstitution node)
    {
        inAFuncOpSubstitution(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFuncOpSubstitution(node);
    }

    public void inAOpSubstitution(AOpSubstitution node)
    {
        defaultIn(node);
    }

    public void outAOpSubstitution(AOpSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpSubstitution(AOpSubstitution node)
    {
        inAOpSubstitution(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAOpSubstitution(node);
    }

    public void inAOpWithReturnSubstitution(AOpWithReturnSubstitution node)
    {
        defaultIn(node);
    }

    public void outAOpWithReturnSubstitution(AOpWithReturnSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpWithReturnSubstitution(AOpWithReturnSubstitution node)
    {
        inAOpWithReturnSubstitution(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getResultIdentifiers());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TIdentifierLiteral> copy = new ArrayList<TIdentifierLiteral>(node.getOperation());
            for(TIdentifierLiteral e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAOpWithReturnSubstitution(node);
    }

    public void inAWhileSubstitution(AWhileSubstitution node)
    {
        defaultIn(node);
    }

    public void outAWhileSubstitution(AWhileSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileSubstitution(AWhileSubstitution node)
    {
        inAWhileSubstitution(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getDoSubst() != null)
        {
            node.getDoSubst().apply(this);
        }
        if(node.getInvariant() != null)
        {
            node.getInvariant().apply(this);
        }
        if(node.getVariant() != null)
        {
            node.getVariant().apply(this);
        }
        outAWhileSubstitution(node);
    }

    public void inAParallelSubstitution(AParallelSubstitution node)
    {
        defaultIn(node);
    }

    public void outAParallelSubstitution(AParallelSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParallelSubstitution(AParallelSubstitution node)
    {
        inAParallelSubstitution(node);
        {
            List<PSubstitution> copy = new ArrayList<PSubstitution>(node.getSubstitutions());
            for(PSubstitution e : copy)
            {
                e.apply(this);
            }
        }
        outAParallelSubstitution(node);
    }

    public void inADefinitionSubstitution(ADefinitionSubstitution node)
    {
        defaultIn(node);
    }

    public void outADefinitionSubstitution(ADefinitionSubstitution node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionSubstitution(ADefinitionSubstitution node)
    {
        inADefinitionSubstitution(node);
        if(node.getDefLiteral() != null)
        {
            node.getDefLiteral().apply(this);
        }
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getParameters());
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outADefinitionSubstitution(node);
    }
}
